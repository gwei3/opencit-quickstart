# This shiro-login.ini file allows username/password access to the server.
# Rename it to shiro.ini and restart the web server to enable it.

[main]
# setting ssl.enabled to false disables the "ssl required" filter
ssl.enabled = true
ssl.port = 443

# the token authentication is an in-memory database which is primarily used
# to authenticate users of the web portal. when someone uses the login api, 
# they provide their username and password and are issued a token. the token
# is registered with the in-memory database and is linked to the user's name and
# permissions.
memoryTokenRealm=com.intel.mtwilson.shiro.authc.token.MemoryTokenRealm
tokenMatcher=com.intel.mtwilson.shiro.authc.token.TokenCredentialsMatcher
memoryTokenRealm.credentialsMatcher=$tokenMatcher
memoryTokenRealm.authorizationCachingEnabled=false

filePasswordRealm=com.intel.mtwilson.shiro.file.FilePasswordRealm
#filePasswordRealm.userFilePath=/opt/trustagent/configuration/users.txt
#filePasswordRealm.permissionFilePath=/opt/trustagent/configuration/permissions.txt
passwordMatcher=com.intel.mtwilson.shiro.authc.password.PasswordCredentialsMatcher
filePasswordRealm.credentialsMatcher=$passwordMatcher
filePasswordRealm.authorizationCachingEnabled=false

securityManager.realms = $memoryTokenRealm, $filePasswordRealm

# built-in authentication strategy
#authcStrategy = org.apache.shiro.authc.pam.FirstSuccessfulStrategy
#authcStrategy = org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy
authcStrategy = com.intel.mtwilson.shiro.LoggingAtLeastOneSuccessfulStrategy
securityManager.authenticator.authenticationStrategy = $authcStrategy

authcToken=com.intel.mtwilson.shiro.authc.token.TokenAuthenticationFilter
authcToken.applicationName=Deployment Wizard
authcToken.sendChallenge=false

authcQueryToken=com.intel.mtwilson.shiro.authc.token.QueryStringTokenAuthenticationFilter
authcQueryToken.applicationName=Deployment Wizard
authcQueryToken.sendChallenge=false


#authcPassword=com.intel.mtwilson.shiro.authc.password.HttpBasicAuthenticationFilter
#authcPassword.applicationName=Deployment Wizard
#authcPassword.authcScheme=NoPrompt
#authcPassword.authzScheme=Basic

authcPassword=com.intel.mtwilson.shiro.authc.password.PasswordAuthenticationFilter
authcPassword.applicationName=Deployment Wizard
authcPassword.sendChallenge=false


# define security by url matching, the first match wins so order is important
# also /path/*  will match /path/a and /path/b but not /path/c/d 
# but /path/**  will match /path/a and /path/b and also /path/c/d
[urls]
/index.html = anon
/v1/html5/public/** = ssl
/v1/login = ssl
/v1/** = ssl, authcPassword, authcToken, authcQueryToken
